diff --git a/ocrd_detectron2/segment.py b/ocrd_detectron2/segment.py
index 050ddd5..1ba5b26 100644
--- a/ocrd_detectron2/segment.py
+++ b/ocrd_detectron2/segment.py
@@ -176,7 +176,14 @@ class Detectron2Segment(Processor):
         Produce a new output file by serialising the resulting hierarchy.
         """
         LOG = getLogger('processor.Detectron2Segment')
-        assert_file_grp_cardinality(self.input_file_grp, 1)
+        input_file_groups = self.input_file_grp.split(',')
+        if len(input_file_groups) == 2:
+            bin_file_group = input_file_groups[1]
+            self.input_file_grp = input_file_groups[0]
+        elif len(input_file_groups) == 1:
+            bin_file_group = input_file_groups[0]
+        else:
+            raise Exception("1 or 2 input groups ar possible")
         assert_file_grp_cardinality(self.output_file_grp, 1)
         level = self.parameter['operation_level']
 
@@ -193,8 +200,13 @@ class Detectron2Segment(Processor):
                 page, page_id, feature_filter='binarized')
             # for morphological post-processing, we will need the binarized image, too
             if self.parameter['postprocessing'] != 'none':
+                bin_files = self.workspace.mets.find_all_files(pageId=input_file.pageId, fileGrp=bin_file_group, mimetype=MIMETYPE_PAGE)
+                bin_file = next(iter(bin_files or []), None)
+                bin_pcgts = page_from_file(self.workspace.download_file(bin_file))
+                self.add_metadata(bin_pcgts)
+                bin_page = bin_pcgts.get_Page()
                 page_image_bin, _, _ = self.workspace.image_from_page(
-                    page, page_id, feature_selector='binarized')
+                    bin_page, page_id, feature_selector='binarized')
                 page_image_raw, page_image_bin = _ensure_consistent_crops(
                     page_image_raw, page_image_bin)
             else:
@@ -223,7 +235,8 @@ class Detectron2Segment(Processor):
                 #        we have to simulate this via parent_object filtering
                 def at_segment(region):
                     return region.parent_object_ is segment
-                regions = list(filter(at_segment, page.get_AllRegions()))
+                regions_to_ignore = self.parameter['regions_to_ignore'].split(',')
+                regions = list(filter(at_segment, page.get_AllRegions(classes=regions_to_ignore)))
 
                 if isinstance(segment, PageType):
                     image_raw = page_image_raw
@@ -263,6 +276,29 @@ class Detectron2Segment(Processor):
                 # convert binarized to single-channel negative
                 array_bin = np.array(image_bin)
                 array_bin = ~ array_bin
+                regions_to_remove = self.parameter['regions_to_remove'].split(',')
+
+                for region_to_remove in regions_to_remove:
+                    try:
+                        region_getter = getattr(segment, 'get_' + region_to_remove)
+                        region_elements = region_getter()
+                        region_reading_order = segment.get_ReadingOrder()
+                        region_reading_order_groups = [region_reading_order.get_UnorderedGroup(), region_reading_order.get_OrderedGroup()]
+
+                        for region_element in region_elements:
+                            region_id = region_element.id
+                            for region_reading_order_group in region_reading_order_groups:
+                                if region_reading_order_group:
+                                    rriList = region_reading_order_group.get_RegionRefIndexed()
+                                    for rri in rriList:
+                                        regionRef = rri.get_regionRef()
+                                        if region_id == regionRef:
+                                            rriList.remove(rri)
+                        region_setter = getattr(segment, 'set_' + region_to_remove)
+                        region_setter([])
+
+                    except AttributeError:
+                        LOG.info("No getter for %s", region_to_remove)
 
                 self._process_segment(segment, regions, coords, array_raw, array_bin, zoomed,
                                       file_id, input_file.pageId)
